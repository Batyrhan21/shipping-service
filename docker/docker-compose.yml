version: '3.9'

services:
  back:
    restart: unless-stopped
    build:
      context: ..
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    env_file:
      - ../src/.env
    entrypoint: "sh /opt/services/shipping-backend/entrypoints/server.sh"
    volumes:
      - ../:/opt/services/shipping-backend
      - ../src/back_static:/opt/services/shipping-backend/src/back_static
      - ../src/back_media:/opt/services/shipping-backend/src/back_media
    networks:
      - nginx_network
      - db_network
    healthcheck:
      test: ["CMD", "python src/manage.py health_check"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 5s


  db:
    image: postgres:14-alpine
    container_name: shipping_db
    restart: unless-stopped
    labels:
    - com.packtpub.compose.app=db-manager 
    volumes:
      - ../data/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ../data/storage/data:/var/lib/postgresql/data
    networks:
      - db_network
    env_file:
      - ../src/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s

  redis:
    image: redis
    ports:
    - 6379:6379
    entrypoint: ["redis-server","/usr/local/etc/redis/redis.conf"]
    labels:
    - com.packtpub.compose.app=cache-manager
    volumes:
    - ../data/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
    - redis-data:/data
    networks:
      - redis_network

volumes:
  redis-data: 

networks:
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge
  redis_network:
    driver: bridge